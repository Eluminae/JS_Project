// Generated by CoffeeScript 1.10.0
$.ajax({
  'global': false,
  'url': 'http://www.francelink.net/datas.json',
  'dataType': "json",
  'success': function(data) {
    var analyseJson, bestPosition, bilan, debug, j, len, listeBilanInitiaux, listeDateNonTrie, listeNbFacturationTrie, listeSommeFacturationTrie, nbClientFactureParMois, ref, sommeFacturationParMois, triDate;
    triDate = function(listeInitiale) {
      var ajoute, annee1, anneeAjoute, i, j, k, len, liste, listeFinale, mois1, moisAjoute, ref;
      listeFinale = [];
      for (j = 0, len = listeInitiale.length; j < len; j++) {
        liste = listeInitiale[j];
        if (listeFinale.length === 0) {
          listeFinale.push(liste);
        } else {
          ajoute = false;
          for (i = k = 0, ref = listeFinale.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
            mois1 = parseInt(listeFinale[i].substring(0, 2));
            annee1 = parseInt(listeFinale[i].substring(3, 5));
            moisAjoute = parseInt(liste.substring(0, 2));
            anneeAjoute = parseInt(liste.substring(3, 5));
            if (anneeAjoute < annee1) {
              listeFinale.splice(i, 0, liste);
              ajoute = true;
              break;
            } else if (anneeAjoute === annee1 && moisAjoute <= mois1) {
              listeFinale.splice(i, 0, liste);
              ajoute = true;
              break;
            }
          }
          if (!ajoute) {
            listeFinale.push(liste);
          }
        }
      }
      return listeFinale;
    };
    bestPosition = function(positions) {
      var bestPos, i, j, len, position;
      bestPos = null;
      i = 0;
      while (bestPos === null && i < positions.length) {
        bestPos = positions[i].position;
        i++;
      }
      if (bestPos) {
        for (j = 0, len = positions.length; j < len; j++) {
          position = positions[j];
          if (position.position < bestPos) {
            bestPos = position.position;
          }
        }
        return bestPos;
      } else {
        return -1;
      }
    };
    debug = false;
    listeBilanInitiaux = {};
    sommeFacturationParMois = {};
    nbClientFactureParMois = {};
    ref = data.bilans;
    for (j = 0, len = ref.length; j < len; j++) {
      bilan = ref[j];
      if (bilan.bilan.field_bilan_initial === "1") {
        listeBilanInitiaux[bilan.bilan.title_1] = bilan.bilan;
      }
    }
    listeDateNonTrie = [];
    listeSommeFacturationTrie = [];
    listeNbFacturationTrie = [];
    analyseJson = function() {
      var bestPosAct, bestPosInit, ceQuilDevraitPayer, fieldFactuPlace, i, k, l, len1, listeKeyword, listeKeywordInitiaux, parsedInitialBilan, ref1, ref2;
      ref1 = data.bilans;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        bilan = ref1[k];
        if (bilan.bilan.field_bilan_initial !== "1") {
          bilan = bilan.bilan;
          ceQuilDevraitPayer = 0;
          listeKeyword = JSON.parse(bilan.field_bilan).keyWords;
          parsedInitialBilan = JSON.parse(listeBilanInitiaux[bilan.title_1].field_bilan);
          for (i = l = 0, ref2 = listeKeyword.length - 1; 0 <= ref2 ? l <= ref2 : l >= ref2; i = 0 <= ref2 ? ++l : --l) {
            if (listeKeyword[i].found === 1) {
              listeKeywordInitiaux = JSON.parse(listeBilanInitiaux[bilan.title_1].field_bilan);
              listeKeywordInitiaux = listeKeywordInitiaux.keyWords[i];
              if (listeKeywordInitiaux) {
                bestPosAct = bestPosition(listeKeyword[i].positions);
                fieldFactuPlace = 0;
                if (bestPosAct > 0 && bestPosAct <= 10) {
                  fieldFactuPlace = bilan['field_factu_place_' + bestPosAct];
                }
                if (fieldFactuPlace) {
                  if (listeKeywordInitiaux.found === 0) {
                    if (debug) {
                      console.log("forcement au dessus");
                    }
                    ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_inf;
                  } else {
                    bestPosInit = bestPosition(parsedInitialBilan.keyWords[i].positions);
                    if (bestPosInit > bestPosAct) {
                      if (debug) {
                        console.log("au dessus");
                      }
                      ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_inf;
                    } else if (bestPosInit === bestPosAct) {
                      if (bestPosInit === 1) {
                        if (debug) {
                          console.log("on reste premier");
                        }
                        ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_first_iso;
                      } else {
                        if (debug) {
                          console.log("egal normal");
                        }
                        ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_iso;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (debug) {
          console.log("il devrait payer : " + ceQuilDevraitPayer);
        }
        if (ceQuilDevraitPayer > bilan.field_plafond_facturation) {
          if (debug) {
            console.log("or c'est supérieur à " + bilan.field_plafond_facturation);
          }
          ceQuilDevraitPayer = parseFloat(bilan.field_plafond_facturation);
        }
        if (debug) {
          console.log("");
        }
        if (bilan.created) {
          if (!sommeFacturationParMois[bilan.created]) {
            sommeFacturationParMois[bilan.created] = 0;
          }
          if (!nbClientFactureParMois[bilan.created]) {
            nbClientFactureParMois[bilan.created] = 0;
          }
          sommeFacturationParMois[bilan.created] += ceQuilDevraitPayer;
          nbClientFactureParMois[bilan.created] += 1;
        }
      }
      if (debug) {
        console.log("somme facturé");
      }
      if (debug) {
        console.log(sommeFacturationParMois);
      }
      if (debug) {
        console.log("par x client");
      }
      if (debug) {
        return console.log(nbClientFactureParMois);
      }
    };
    return rf.StandaloneDashboard(function(db) {
      var chart, k, key, l, len1, len2, listeDateTrie;
      chart = new ChartComponent("sales");
      chart.setCaption("Resultat des facturations par mois");
      chart.setYAxis("Somme des bilans", {
        numberHumanize: true
      });
      chart.addYAxis("quantity", "Quantity", []);
      chart.lock();
      analyseJson();
      Object.keys(sommeFacturationParMois).forEach(function(key) {
        return listeDateNonTrie.push(key);
      });
      listeDateTrie = triDate(listeDateNonTrie);
      chart.setLabels(listeDateTrie);
      for (k = 0, len1 = listeDateTrie.length; k < len1; k++) {
        key = listeDateTrie[k];
        listeSommeFacturationTrie.push(sommeFacturationParMois[key]);
      }
      for (l = 0, len2 = listeDateTrie.length; l < len2; l++) {
        key = listeDateTrie[l];
        listeNbFacturationTrie.push(nbClientFactureParMois[key]);
      }
      chart.addSeries("Somme", "Somme", listeSommeFacturationTrie, {
        seriesDisplayType: "column",
        numberPrefix: "$"
      });
      chart.addSeries("nb_client", "Nombre de client", listeNbFacturationTrie, {
        seriesDisplayType: "line",
        "yAxis": "quantity"
      });
      chart.unlock();
      return db.addComponent(chart);
    });
  }
});

//# sourceMappingURL=monScript.js.map

// Generated by CoffeeScript 1.10.0

/*
rf.StandaloneDashboard (db) ->
  chart = new ChartComponent "sales"
  chart.setDimensions 8,6
  chart.setCaption "sales - 2013 vs 2012"
  chart.setLabels ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"]
  chart.addSeries "sales2013", "2013", [22400, 24800, 21800, 21800, 24600, 27600, 26800, 27700, 23700, 25900, 26800, 24800]
  chart.addSeries "sales2012", "2012", [10000, 11500, 12500, 15000, 16000, 17600, 18800, 19700, 21700, 21900, 22900, 20800], {seriesDisplayType: "line"}
  chart.setYAxis "Sales", {numberPrefix: "$", numberHumanize: true}
  db.addComponent chart
 */

/*
$.get "datas.json", (data, status) ->
  for bilan in data.bilans
    #console.log bilan.bilan.title
    somme = 0
  console.log data.bilans[0]
, "json"
 */
$.ajax({
  'async': true,
  'global': false,
  'url': 'datas.json',
  'dataType': "json",
  'success': function(data) {
    var bestPosAct, bestPosInit, bestPosition, bilan, ceQuilDevraitPayer, determineFieldFactuPlace, i, j, k, keyword, len, len1, listeBilanInitiaux, listeKeywordInitiaux, nbClientFactureParMois, ref, ref1, results, sommeFacturationParMois;
    bestPosition = function(positions) {
      var bestPos, i, j, len, position;
      bestPos = null;
      i = 0;
      while (bestPos === null && i < positions.length) {
        bestPos = positions[i].position;
        i++;
      }
      if (bestPos) {
        for (j = 0, len = positions.length; j < len; j++) {
          position = positions[j];
          if (position.position < bestPos) {
            bestPos = position.position;
          }
        }
        return bestPos;
      } else {
        return -1;
      }
    };
    determineFieldFactuPlace = function(position, bilan) {
      switch (position) {
        case 1:
          return bilan.field_factu_place_1;
        case 2:
          return bilan.field_factu_place_2;
        case 3:
          return bilan.field_factu_place_3;
        case 4:
          return bilan.field_factu_place_4;
        case 5:
          return bilan.field_factu_place_5;
        case 6:
          return bilan.field_factu_place_6;
        case 7:
          return bilan.field_factu_place_7;
        case 8:
          return bilan.field_factu_place_8;
        case 9:
          return bilan.field_factu_place_9;
        case 10:
          return bilan.field_factu_place_10;
        default:
          return 0;
      }
    };
    listeBilanInitiaux = {};
    sommeFacturationParMois = {};
    nbClientFactureParMois = {};
    ref = data.bilans;
    for (j = 0, len = ref.length; j < len; j++) {
      bilan = ref[j];
      if (bilan.bilan.field_bilan_initial === "1") {
        listeBilanInitiaux[bilan.bilan.title_1] = bilan.bilan;
      }
    }
    ref1 = data.bilans;
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      bilan = ref1[k];
      if (bilan.bilan.field_bilan_initial !== "1") {
        bilan = bilan.bilan;
        ceQuilDevraitPayer = 0;
        i = 0;
        results.push((function() {
          var l, len2, ref2, results1;
          ref2 = JSON.parse(bilan.field_bilan).keyWords;
          results1 = [];
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            keyword = ref2[l];
            if (keyword.found === 1) {
              listeKeywordInitiaux = JSON.parse(listeBilanInitiaux[bilan.title_1].field_bilan);
              listeKeywordInitiaux = listeKeywordInitiaux.keyWords[i];
              bestPosAct = bestPosition(keyword.positions);
              if (listeKeywordInitiaux.found === 0) {
                if (bestPosition(keyword.positions) !== -1) {
                  console.log("forcement au dessus");
                  console.log(determineFieldFactuPlace(bestPosAct, bilan) * bilan.field_coef_factu_inf);
                  if ((determineFieldFactuPlace(bestPosAct, bilan) * bilan.field_coef_factu_inf) === 0) {
                    results1.push(console.log(bestPosition(keyword.positions)));
                  } else {
                    results1.push(void 0);
                  }
                } else {

                }
              } else {
                bestPosInit = bestPosition(JSON.parse(listeBilanInitiaux[bilan.title_1].field_bilan).keyWords[i].positions);
                if (bestPosInit > bestPosAct) {
                  console.log("au dessus");
                  console.log(determineFieldFactuPlace(bestPosAct, bilan) * bilan.field_coef_factu_inf);
                } else if (bestPosInit === bestPosAct) {
                  if (bestPosInit === 1) {
                    console.log("on reste premier");
                    console.log(determineFieldFactuPlace(bestPosAct, bilan) * bilan.field_coef_factu_first_iso);
                  } else {
                    console.log("egal normal");
                    console.log(determineFieldFactuPlace(bestPosAct, bilan) * bilan.field_coef_factu_iso);
                  }
                }
                results1.push(i++);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
});

//# sourceMappingURL=monScript.js.map

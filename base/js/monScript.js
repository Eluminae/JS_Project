// Generated by CoffeeScript 1.10.0
$.ajax({
  'async': true,
  'global': false,
  'url': 'datas.json',
  'dataType': "json",
  'success': function(data) {
    var bestPosAct, bestPosInit, bestPosition, bilan, ceQuilDevraitPayer, debug, determineFieldFactuPlace, fieldFactuPlace, i, j, k, keyword, l, len, len1, len2, listeBilanInitiaux, listeKeyword, listeKeywordInitiaux, nbClientFactureParMois, parsedInitialBilan, ref, ref1, sommeFacturationParMois;
    bestPosition = function(positions) {
      var bestPos, i, j, len, position;
      bestPos = null;
      i = 0;
      while (bestPos === null && i < positions.length) {
        bestPos = positions[i].position;
        i++;
      }
      if (bestPos) {
        for (j = 0, len = positions.length; j < len; j++) {
          position = positions[j];
          if (position.position < bestPos) {
            bestPos = position.position;
          }
        }
        return bestPos;
      } else {
        return -1;
      }
    };
    determineFieldFactuPlace = function(position, bilan) {
      switch (position) {
        case 1:
          return bilan.field_factu_place_1;
        case 2:
          return bilan.field_factu_place_2;
        case 3:
          return bilan.field_factu_place_3;
        case 4:
          return bilan.field_factu_place_4;
        case 5:
          return bilan.field_factu_place_5;
        case 6:
          return bilan.field_factu_place_6;
        case 7:
          return bilan.field_factu_place_7;
        case 8:
          return bilan.field_factu_place_8;
        case 9:
          return bilan.field_factu_place_9;
        case 10:
          return bilan.field_factu_place_10;
        default:
          return 0;
      }
    };
    debug = false;
    listeBilanInitiaux = {};
    sommeFacturationParMois = {};
    nbClientFactureParMois = {};
    ref = data.bilans;
    for (j = 0, len = ref.length; j < len; j++) {
      bilan = ref[j];
      if (bilan.bilan.field_bilan_initial === "1") {
        listeBilanInitiaux[bilan.bilan.title_1] = bilan.bilan;
      }
    }
    ref1 = data.bilans;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      bilan = ref1[k];
      if (bilan.bilan.field_bilan_initial !== "1") {
        bilan = bilan.bilan;
        ceQuilDevraitPayer = 0;
        i = 0;
        listeKeyword = JSON.parse(bilan.field_bilan).keyWords;
        parsedInitialBilan = JSON.parse(listeBilanInitiaux[bilan.title_1].field_bilan);
        for (l = 0, len2 = listeKeyword.length; l < len2; l++) {
          keyword = listeKeyword[l];
          if (keyword.found === 1) {
            listeKeywordInitiaux = JSON.parse(listeBilanInitiaux[bilan.title_1].field_bilan);
            listeKeywordInitiaux = listeKeywordInitiaux.keyWords[i];
            bestPosAct = bestPosition(keyword.positions);
            fieldFactuPlace = determineFieldFactuPlace(bestPosAct, bilan);
            if (listeKeywordInitiaux.found === 0) {
              if (bestPosAct !== -1) {
                if (debug) {
                  console.log("forcement au dessus");
                }
                ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_inf;
              } else {

              }
            } else {
              bestPosInit = bestPosition(parsedInitialBilan.keyWords[i].positions);
              if (bestPosInit > bestPosAct) {
                if (debug) {
                  console.log("au dessus");
                }
                ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_inf;
              } else if (bestPosInit === bestPosAct) {
                if (bestPosInit === 1) {
                  if (debug) {
                    console.log("on reste premier");
                  }
                  ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_first_iso;
                } else {
                  if (debug) {
                    console.log("egal normal");
                  }
                  ceQuilDevraitPayer += fieldFactuPlace * bilan.field_coef_factu_iso;
                }
              }
            }
            i++;
          }
        }
        if (debug) {
          console.log("il devrait payer : " + ceQuilDevraitPayer);
        }
        if (ceQuilDevraitPayer > bilan.field_plafond_facturation) {
          if (debug) {
            console.log("or c'est supérieur à " + bilan.field_plafond_facturation);
          }
          ceQuilDevraitPayer = parseFloat(bilan.field_plafond_facturation);
        }
        if (debug) {
          console.log("");
        }
        if (!sommeFacturationParMois[bilan.created]) {
          sommeFacturationParMois[bilan.created] = 0;
        }
        if (!nbClientFactureParMois[bilan.created]) {
          nbClientFactureParMois[bilan.created] = 0;
        }
        sommeFacturationParMois[bilan.created] += ceQuilDevraitPayer;
        nbClientFactureParMois[bilan.created] += 1;
      }
    }
    if (debug) {
      console.log("somme facturé");
    }
    if (debug) {
      console.log(sommeFacturationParMois);
    }
    if (debug) {
      console.log("par x client");
    }
    if (debug) {
      console.log(nbClientFactureParMois);
    }
    console.log("Sommes des facturations par mois");
    Object.keys(sommeFacturationParMois).forEach(function(key) {
      return console.log(key, sommeFacturationParMois[key]);
    });
    console.log("Sommes des clients facturés par mois");
    Object.keys(nbClientFactureParMois).forEach(function(key) {
      return console.log(key, nbClientFactureParMois[key]);
    });
    return rf.StandaloneDashboard(function(db) {
      var chart;
      chart = new ChartComponent("sales");
      chart.setDimensions(8, 6);
      chart.setCaption("sales - 2013 vs 2012");
      chart.setLabels(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"]);
      chart.addSeries("sales2013", "2013", [22400, 24800, 21800, 21800, 24600, 27600, 26800, 27700, 23700, 25900, 26800, 24800]);
      chart.addSeries("sales2012", "2012", [10000, 11500, 12500, 15000, 16000, 17600, 18800, 19700, 21700, 21900, 22900, 20800], {
        seriesDisplayType: "line"
      });
      chart.setYAxis("Sales", {
        numberPrefix: "$",
        numberHumanize: true
      });
      return db.addComponent(chart);
    });
  }
});

//# sourceMappingURL=monScript.js.map
